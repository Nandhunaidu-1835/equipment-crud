"""Updated Equipment model with Enum fix

Revision ID: f05de0bc487c
Revises: 
Create Date: 2025-03-24 15:28:50.279182

"""
from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import text

# revision identifiers, used by Alembic.
revision: str = 'f05de0bc487c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('access_log', 'access_timestamp',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('access_log', 'status_code',
               existing_type=sa.SMALLINT(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.create_index(op.f('ix_access_log_id'), 'access_log', ['id'], unique=False)
    op.alter_column('equipment', 'installation_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('equipment', 'warranty_start_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('equipment', 'warranty_end_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('equipment', 'location_1',
               existing_type=sa.BIGINT(),
               nullable=True)
    op.alter_column('equipment', 'location_2',
               existing_type=sa.BIGINT(),
               nullable=True)
    op.alter_column('equipment', 'location_3',
               existing_type=sa.BIGINT(),
               nullable=True)
    equipment_oos_enum = sa.Enum('YES', 'NO', name='equipment_equipment_oos')

# Create ENUM type in PostgreSQL
    equipment_oos_enum.create(op.get_bind(), checkfirst=True)

# Convert column from TEXT to ENUM safely
    op.execute("ALTER TABLE equipment ALTER COLUMN equipment_oos TYPE equipment_equipment_oos USING equipment_oos::equipment_equipment_oos")

    op.alter_column('equipment', 'updated_datetime',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('equipment', 'defectflag',
               existing_type=sa.SMALLINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.create_index(op.f('ix_equipment_id'), 'equipment', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_equipment_id'), table_name='equipment')
    op.alter_column('equipment', 'defectflag',
               existing_type=sa.Integer(),
               type_=sa.SMALLINT(),
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('equipment', 'updated_datetime',
               existing_type=postgresql.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('equipment', 'equipment_oos',
               existing_type=sa.Enum('YES', 'NO', name='equipment_equipment_oos'),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('equipment', 'location_3',
               existing_type=sa.BIGINT(),
               nullable=False)
    op.alter_column('equipment', 'location_2',
               existing_type=sa.BIGINT(),
               nullable=False)
    op.alter_column('equipment', 'location_1',
               existing_type=sa.BIGINT(),
               nullable=False)
    op.alter_column('equipment', 'warranty_end_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('equipment', 'warranty_start_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('equipment', 'installation_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.drop_index(op.f('ix_access_log_id'), table_name='access_log')
    op.alter_column('access_log', 'status_code',
               existing_type=sa.Integer(),
               type_=sa.SMALLINT(),
               existing_nullable=True)
    op.alter_column('access_log', 'access_timestamp',
               existing_type=postgresql.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    # ### end Alembic commands ###
